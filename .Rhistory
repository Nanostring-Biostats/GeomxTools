ggplot(results, aes(x=totalValues, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(nrow~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow))+
geom_line(aes(linetype = package), size = 0.6)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow~package))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = c(nrow,package)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow))+
geom_line( size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line( size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrwo))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line(size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line(size = 1)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line(size = .8)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(nrow), group = nrow))+
geom_line(size = .8)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(nrow), group = nrow))+
geom_line(size = .8)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)+
scale_x_continuous(limits = c(0, 3e8))
ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(nrow), group = nrow))+
geom_line(size = .8)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)+
scale_x_continuous(limits = c(0, 3e8))+
scale_y_continuous(limits = c(0, 15))
gp <- ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(nrow), group = nrow))+
geom_line(size = .8)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)+
scale_x_continuous(limits = c(0, 3e8))+
scale_y_continuous(limits = c(0, 15))+
labs(color = "# rows")
gp
ggsave("~/../Downloads/timeTrialResults_nrow.png", gp, device = "png", width = 12, height = 10)
ggsave("~/../Downloads/timeTrialResults_nrow.png", gp, device = "png",
width = 12, height = 12)
gp <- ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(nrow), group = nrow))+
geom_line(size = .8)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)+
scale_x_continuous(limits = c(0, 3e8))+
scale_y_continuous(limits = c(0, 12))+
labs(color = "# rows")
gp
ggsave("~/../Downloads/timeTrialResults_nrow.png", gp, device = "png",
width = 8, height = 8)
ggsave("~/../Downloads/timeTrialResults_nrow.png", gp, device = "png",
width = 8, height = 6)
results <- read.csv("~/../Downloads/timeTrialResults.csv")
head(results)
ggplot(results, aes(x=density, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(nrow~IO)
library(ggplot2)
results <- read.csv("~/../Downloads/timeTrialResults.csv")
ggplot(results, aes(x=density, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(nrow~IO)
ggplot(results, aes(x=density, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~IO)
head(results)
ggplot(results[results$ncol = 1e3,], aes(x=density, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~IO)
ggplot(results[results$ncol == 1e3,], aes(x=density, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~IO)
ggplot(results, aes(x=density, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results, aes(x=density, y=time/60, color = c(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results, aes(x=density, y=time/60, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results, aes(x=density, y=time/60, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol, scales = "free_y")
ggplot(results[results$ncol %in% c(1e3,1e4,1e5),], aes(x=density, y=time/60, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time/60, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time/60, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_log10()
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_log10()
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=log2(time), color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=log2(time/60), color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_log2()
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_continuous(trans = log2())
scale_y_continuous(trans = log2
)
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_continuous(trans = log2)
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_continuous(trans = "log2")
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time/60, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (min)")+
facet_grid(nrow~ncol)+
scale_y_continuous(trans = "log2")
ggplot(results[results$ncol %in% c(1e4,1e5,1e6),], aes(x=density, y=time, color = paste(storageType, IO)))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Sparsity", y="Time (sec)")+
facet_grid(nrow~ncol)+
scale_y_continuous(trans = "log2")
ggplot(results, aes(x=totalValues, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(nrow~IO)+
scale_y_continuous(trans = "log2")
ggplot(results, aes(x=totalValues, y=time, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(nrow~IO)+
scale_y_continuous(trans = "log2")
ggplot(results, aes(x=totalValues, y=time/60, color = storageType))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(nrow~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line(aes(linetype = package), size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = nrow, group = nrow))+
geom_line( size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(row)))+
geom_line( size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results, aes(x=totalValues, y=time/60, color = as.factor(nrow)))+
geom_line( size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
ggplot(results[results$totalValues <= 3e8,], aes(x=totalValues, y=time/60, color = as.factor(nrow)))+
geom_line( size = 0.6)+
labs(x = "Total Non-Sparse Values in Matrix", y="Time (min)")+
facet_grid(storageType~IO)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 5,
fig.height = 4.5,
dpi = 200
)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("BiocManager")
# The following initializes most up to date version of Bioc
BiocManager::install(version="3.16")
BiocManager::install("NanoStringNCTools")
BiocManager::install("GeomxTools")
BiocManager::install("GeoMxWorkflows")
library(NanoStringNCTools)
library(NanoStringNCTools)
library(GeomxTools)
library(GeoMxWorkflows)
if(packageVersion("GeomxTools") < "2.1" &
packageVersion("GeoMxWorkflows") >= "1.0.1"){
stop("GeomxTools and Workflow versions do not match. Please use the same version.
This workflow is meant to be used with most current version of packages.
If you are using an older version of Bioconductor please reinstall GeoMxWorkflows and use vignette(GeoMxWorkflows) instead")
}
if(packageVersion("GeomxTools") > "2.1" &
packageVersion("GeoMxWorkflows") <= "1.0.1"){
stop("GeomxTools and Workflow versions do not match.
Please use the same version, see install instructions above.")
# to remove current package version
# remove.packages("GeomxTools")
# remove.packages("GeoMxWorkflows")
# see install instructions above
}
# Reference the main folder 'file.path' containing the sub-folders with each
# data file type:
datadir <- system.file("extdata", "WTA_NGS_Example",
package="GeoMxWorkflows")
# automatically list files in each directory for use
DCCFiles <- dir(file.path(datadir, "dccs"), pattern = ".dcc$",
full.names = TRUE, recursive = TRUE)
PKCFiles <- unzip(zipfile = dir(file.path(datadir, "pkcs"), pattern = ".zip$",
full.names = TRUE, recursive = TRUE))
SampleAnnotationFile <-
dir(file.path(datadir, "annotation"), pattern = ".xlsx$",
full.names = TRUE, recursive = TRUE)
# load data
demoData <-
readNanoStringGeoMxSet(dccFiles = DCCFiles,
pkcFiles = PKCFiles,
phenoDataFile = SampleAnnotationFile,
phenoDataSheet = "Template",
phenoDataDccColName = "Sample_ID",
protocolDataColNames = c("aoi", "roi"),
experimentDataColNames = c("panel"))
library(knitr)
pkcs <- annotation(demoData)
modules <- gsub(".pkc", "", pkcs)
kable(data.frame(PKCs = pkcs, modules = modules))
library(dplyr)
library(ggforce)
# select the annotations we want to show, use `` to surround column names with
# spaces or special symbols
count_mat <- count(pData(demoData), `slide name`, class, region, segment)
# simplify the slide names
count_mat$`slide name` <- gsub("disease", "d",
gsub("normal", "n", count_mat$`slide name`))
# gather the data and plot in order: class, slide name, region, segment
test_gr <- gather_set_data(count_mat, 1:4)
test_gr$x <- factor(test_gr$x,
levels = c("class", "slide name", "region", "segment"))
# plot Sankey
ggplot(test_gr, aes(x, id = id, split = y, value = n)) +
geom_parallel_sets(aes(fill = region), alpha = 0.5, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.2) +
geom_parallel_sets_labels(color = "white", size = 5) +
theme_classic(base_size = 17) +
theme(legend.position = "bottom",
axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.y = element_blank()) +
scale_y_continuous(expand = expansion(0)) +
scale_x_discrete(expand = expansion(0)) +
labs(x = "", y = "") +
annotate(geom = "segment", x = 4.25, xend = 4.25,
y = 20, yend = 120, lwd = 2) +
annotate(geom = "text", x = 4.19, y = 70, angle = 90, size = 5,
hjust = 0.5, label = "100 segments")
library(dplyr)
library(ggforce)
# select the annotations we want to show, use `` to surround column names with
# spaces or special symbols
count_mat <- count(pData(demoData), `slide name`, class, region, segment)
# simplify the slide names
count_mat$`slide name` <- gsub("disease", "d",
gsub("normal", "n", count_mat$`slide name`))
# gather the data and plot in order: class, slide name, region, segment
test_gr <- gather_set_data(count_mat, 1:4)
# gather the data and plot in order: class, slide name, region, segment
test_gr <- gather_set_data(count_mat, 1:4)
test_gr$x <- factor(test_gr$x,
levels = c("class", "slide name", "region", "segment"))
test_gr
test_gr
factor(test_gr$x,
levels = c("class", "slide name", "region", "segment")
)
count_mat
# select the annotations we want to show, use `` to surround column names with
# spaces or special symbols
count_mat <- count(pData(demoData), `slide name`, class, region, segment)
# simplify the slide names
count_mat$`slide name` <- gsub("disease", "d",
gsub("normal", "n", count_mat$`slide name`))
# gather the data and plot in order: class, slide name, region, segment
test_gr <- gather_set_data(count_mat, 1:4)
head(test_gr)
table(test_gr$x)
?gather_set_data
table(test_gr$id)
table(test_gr$y)
dim(count_mat)
rep(1:4, nrow(count_mat))
vapply(1:4, function(x){rep(x, nrow(count_mat))}
)
sapply(1:4, function(x){rep(x, nrow(count_mat))})
lapply(1:4, function(x){rep(x, nrow(count_mat))})
sapply(1:4, function(x){rep(x, nrow(count_mat))}, 1)
vapply(1:4, function(x){rep(x, nrow(count_mat))}, 1)
sapply(1:4, function(x){rep(x, nrow(count_mat))})
sapply(1:4, function(x){rep(x, nrow(count_mat))}, simplify = T)
sapply(1:4, function(x){rep(x, nrow(count_mat))}, simplify = T)
sapply(1:4, function(x){rep(x, nrow(count_mat))}, simplify = T)
sapply(1:4, function(x){rep(x, nrow(count_mat))}, simplify = F)
unlist(apply(1:4, function(x){rep(x, nrow(count_mat))}))
unlist(sapply(1:4, function(x){rep(x, nrow(count_mat))}))
colnames(count_mat)[1]
for(i in 1:4){
test_gr$x[test_gr$x == i] <- colnames(count_mat)[i]
}
head(test_gr)
test_gr$x <- factor(test_gr$x,
levels = c("class", "slide name", "region", "segment"))
# plot Sankey
ggplot(test_gr, aes(x, id = id, split = y, value = n)) +
geom_parallel_sets(aes(fill = region), alpha = 0.5, axis.width = 0.1) +
geom_parallel_sets_axes(axis.width = 0.2) +
geom_parallel_sets_labels(color = "white", size = 5) +
theme_classic(base_size = 17) +
theme(legend.position = "bottom",
axis.ticks.y = element_blank(),
axis.line = element_blank(),
axis.text.y = element_blank()) +
scale_y_continuous(expand = expansion(0)) +
scale_x_discrete(expand = expansion(0)) +
labs(x = "", y = "") +
annotate(geom = "segment", x = 4.25, xend = 4.25,
y = 20, yend = 120, lwd = 2) +
annotate(geom = "text", x = 4.19, y = 70, angle = 90, size = 5,
hjust = 0.5, label = "100 segments")
is.numeric(test_gr$x)
test_gr$x
# gather the data and plot in order: class, slide name, region, segment
test_gr <- gather_set_data(count_mat, 1:4)
is.numeric(test_gr$x)
run_02735016-ecf8-4083-bb3f-44763297ed6a_CUSTOM_401bb150-3c0a-4605-ab17-31cee8b7e1d7_SUCCESS_1670890995
library(SpatialOmicsOverlay)
tifFile <- "C:/Users/mgriswold/Downloads/Block3-c.ome.tiff"
annots <- "C:/Users/mgriswold/Downloads/annotation.xlsx"
JAX_tiff <- readSpatialOverlay(ometiff = tifFile, annots = annots,
slideName = "Block3-c", image = FALSE,
saveFile = TRUE, outline = TRUE)
library(SpatialOmicsOverlay)
tifFile <- "C:/Users/mgriswold/Downloads/Block3-c.ome.tiff"
annots <- "C:/Users/mgriswold/Downloads/annotation.xlsx"
ometiff = tifFile
annots = annots
slideName = "Block3-c"
image = FALSE
saveFile = TRUE
outline = TRUE
labWorksheet <- FALSE
if(is(annots,"NanoStringGeoMxSet")){
annots <- sData(annots)
annots <- annots[annots$`slide name` == slideName,]
if(nrow(annots) == 0){
stop("No ROIs match given slideName")
}
annots$Sample_ID <- gsub(".dcc", "", rownames(annots))
labWorksheet <- TRUE
colnames(annots)[colnames(annots) == "roi"] <- "ROILabel"
}else if(endsWith(tolower(annots), "_labworksheet.txt")){
annots <- readLabWorksheet(lw = annots, slideName = slideName)
labWorksheet <- TRUE
}else if(endsWith(annots, ".xlsx")){
annots <- readxl::read_xlsx(annots, sheet = "SegmentProperties")
}else{
annots <- as.data.frame(data.table::fread(file = annots))
}
if(image == TRUE & is.null(res)){
warning("No res was given so default res of 6 will be used")
res <- 6
}
print("Extracting XML")
xml <- xmlExtraction(ometiff = ometiff, saveFile = saveFile)
print("Parsing XML - scan metadata")
scan_metadata <- parseScanMetadata(omexml = xml)
omexml = xml
if(!is(annots,"data.frame")){
stop("File must be read into R and passed as a dataframe")
}
if(any(is(omexml,"XMLInternalDocument"))){
omexml <- xmlToList(omexml)
}
if(is(omexml,"character")){
if(endsWith(omexml, suffix = ".ome.tiff")){
omexml <- xmlExtraction(ometiff = omexml)
}
}
ROIs <- omexml[which(names(omexml) == "ROI")]
names(ROIs) <- paste0(names(ROIs), 0:(length(ROIs)-1))
ROIs
AOIattrs <- NULL
# Time trial with lapply showed minimal time difference
for(ROI in names(ROIs)){
ROInum <- ROIs[[ROI]]$AnnotationRef
ROInum <- as.numeric(gsub("Annotation:", "", ROInum))
ROInum <- as.numeric(omexml$StructuredAnnotations[ROInum]$XMLAnnotation$Value$ChannelThresholds$RoiName)
ROI <- ROIs[[ROI]]$Union
masks <- which(names(ROI) == "Mask")
for(mask in masks){
maskNum <- which(masks == mask)
segmentation <- ifelse(length(masks) == 1, "Geometric", "Segmented")
mask.attrs <- ROI[[mask]]$.attrs
if(labworksheet == TRUE & !"Text" %in% names(mask.attrs)){
stop("Scan was not exported on version 2.4+, please use DA annotation instead of Lab Worksheet")
}else if(labworksheet == TRUE){
maskText <- mask.attrs[["Text"]]
}else{
maskText <- NULL
}
ROIannot <- annotMatching(annots, ROInum, maskNum, maskText)
if(is.null(ROIannot) ){
next
}else if(nrow(ROIannot) == 0){
next
}
AOIattr <- as.data.frame(c(ROILabel=ROInum,
ROIannot,
mask.attrs[c("Height", "Width", "X", "Y")],
Segmentation=segmentation))
AOIattr$Height <- as.numeric(AOIattr$Height)
AOIattr$Width <- as.numeric(AOIattr$Width)
AOIattr$X <- as.numeric(AOIattr$X)
AOIattr$Y <- as.numeric(AOIattr$Y)
AOIattrs <- rbind(AOIattrs,
cbind(AOIattr,
Position=ROI[[mask]]$BinData$text))
}
}
5+6
labworksheet
labWorksheet <- FALSE
5+6
gc()
5+6
BiocManager::install("SpatialOmicsOverlay")
BiocManager::install(3.17)
BiocManager::install("3.17")
install.package("BiocManager")
install.packages("BiocManager")
BiocManger::install(3.18)
BiocManager::install(3.18)
BiocManager::install("3.18")
BiocManager::install()
BiocManager::install("GeomxTools")
install.packages("devtools")
devtools::check("~/GeomxTools/")
setwd("GeomxTools/")
devtools::check()
install.packages("Seurat")
install.packages("SeuratObject")
devtools::check()
install.packages(c("rmarkdown", "testthat", "ggiraph", "patchwork"))
BiocManager::install("SpatialExperiment")
BiocManager::install("SpatialDecon")
install.packages("knitr")
devtools::check()
devtools::check()
sessionInfo()
packageVersion("parallel")
